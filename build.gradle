plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'

}

bootJar {
    classifier("boot")
    mainClass.set("com.vnco.fusiontech.app.FusionTechApplication")
}

jar {
    classifier("")
}

group = 'com.vnco.fusiontech'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url = uri("https://repo.spring.io/milestone") }
        maven { url = uri("https://repo.spring.io/release") }
        maven { url = uri("https://repo.spring.io/libs-release") }
        maven { url = uri("https://repo.spring.io/plugins-release/")}
    }

    ext {
        jjwtVersion = '0.11.5'
        structVersion = "1.5.3.Final"
        structExtVersion = "0.1.2"
        hibernateTypesVersion = "3.0.1"
        springCloudVersion = "2022.0.0-RC2"
    }
    sourceCompatibility = '17'
    targetCompatibility = '17'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation project(":common")
        compileOnly "org.projectlombok:lombok"
        developmentOnly "org.springframework.boot:spring-boot-devtools"

        annotationProcessor "org.projectlombok:lombok"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        implementation "org.springframework.boot:spring-boot-starter-web:3.1.1"
        compileOnly "org.springframework.boot:spring-boot-starter-tomcat"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        implementation "org.springframework.boot:spring-boot-starter-data-rest"
        implementation "org.springframework.boot:spring-boot-starter-hateoas"
        implementation "org.springframework.boot:spring-boot-starter-validation"
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'com.google.firebase:firebase-admin:9.2.0'

        implementation('com.github.javafaker:javafaker:1.0.2') {
            exclude group: 'org.yaml', module: 'snakeyaml'
        }
        implementation "org.mapstruct:mapstruct:${structVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${structVersion}"
        implementation "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${structExtVersion}"
        annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:${structExtVersion}"
        // If you are using MapStruct Spring Extensions in test code
        testAnnotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:${structExtVersion}"
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters"
    }
}

dependencies {


    implementation project(":common")
    implementation project(":product")
    implementation project(":user")
    implementation project(":security")
    implementation project(":order")
    runtimeOnly "com.h2database:h2"
    runtimeOnly "com.mysql:mysql-connector-j"

//    implementation "io.hypersistence:hypersistence-utils-hibernate-60:${hibernateTypesVersion}"
//    implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.14.1'
//    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

}

tasks.named('test') {
    useJUnitPlatform()
}
