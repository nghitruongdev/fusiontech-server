import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.vnco.fusiontech'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

allprojects {

    ext {
        jjwtVersion = '0.11.5'
        structVersion = "1.5.3.Final"
        structExtVersion = "0.1.2"
        hibernateTypesVersion = "3.0.1"
        springCloudVersion = "2022.0.0-RC2"
        firebaseAdminVersion = "9.2.0"
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }
    dependencies {
        implementation project(":common")

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

//        implementation "org.springframework.boot:spring-boot-starter-web"
//        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
//        implementation "org.springframework.boot:spring-boot-starter-data-rest"
//        implementation "org.springframework.boot:spring-boot-starter-hateoas"
//        implementation "org.springframework.boot:spring-boot-starter-validation"

        // https://mvnrepository.com/artifact/io.hypersistence/hypersistence-utils-hibernate-60
        implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.5.1'

        implementation "org.mapstruct:mapstruct:${structVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${structVersion}"
        implementation "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${structExtVersion}"
        annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:${structExtVersion}"
        // If you are using MapStruct Spring Extensions in test code
        testAnnotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:${structExtVersion}"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
//        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
//        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters"
    }
}

dependencies {
    implementation project(":product")
    implementation project(":user")
    implementation project(":security")
    implementation project(":order")
    implementation project(":mail")
    implementation project(":storage-service")
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    implementation('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    developmentOnly "com.h2database:h2"
    runtimeOnly "com.mysql:mysql-connector-j"
    implementation "com.google.firebase:firebase-admin:${firebaseAdminVersion}"
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

bootRun {
    dependsOn 'classes'
}

tasks.named('test') {
    useJUnitPlatform()
}

springBoot {
    mainClass = 'com.vnco.fusiontech.app.FusionTechApplication'
    // Replace with the fully qualified name of your main class
}
